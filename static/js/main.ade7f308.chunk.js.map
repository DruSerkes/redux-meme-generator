{"version":3,"sources":["MemeForm.js","Meme.js","Memes.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["MemeForm","dispatch","useDispatch","INITIAL_VALUES","url","top","bottom","useState","values","setValues","handleChange","e","target","name","value","className","onSubmit","preventDefault","payload","id","uuid","type","onChange","placeholder","required","Meme","handleRemove","style","backgroundImage","onMouseEnter","document","getElementById","children","onMouseLeave","display","onClick","Memes","memes","useSelector","state","parentElement","map","meme","key","App","Boolean","window","location","hostname","match","INITIAL_STATE","rootReducer","action","filter","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8WA+DeA,G,MA1DE,WAChB,IAAMC,EAAWC,cACXC,EAAiB,CACtBC,IAAS,GACTC,IAAS,GACTC,OAAS,IALY,EAOQC,mBAASJ,GAPjB,mBAOdK,EAPc,KAONC,EAPM,KAQhBC,EAAe,SAACC,GAAO,IAAD,EACHA,EAAEC,OAAlBC,EADmB,EACnBA,KAAMC,EADa,EACbA,MACdL,GAAU,SAACD,GAAD,mBAAC,eACPA,GADM,kBAERK,EAAQC,QAWX,OACC,yBAAKC,UAAU,YACd,4CACA,0BAAMC,SAXa,SAACL,GACrBA,EAAEM,iBADyB,IAGrBC,EAAU,CAAEd,IADWI,EAArBJ,IACeC,IADMG,EAAhBH,IACeC,OADCE,EAAXF,OACkBa,GAAIC,eACxCnB,EAAS,CAAEoB,KAAM,WAAYH,YAC7BT,EAAUN,KAOR,2BACCgB,GAAG,MACHN,KAAK,MACLQ,KAAK,MACLP,MAAON,EAAOJ,IACdkB,SAAUZ,EACVa,YAAY,wBACZC,UAAQ,IAET,2BACCL,GAAG,MACHN,KAAK,MACLQ,KAAK,OACLP,MAAON,EAAOH,IACdiB,SAAUZ,EACVa,YAAY,wBAEb,2BACCJ,GAAG,SACHN,KAAK,SACLQ,KAAK,OACLP,MAAON,EAAOF,OACdgB,SAAUZ,EACVa,YAAY,2BAEb,4BAAQF,KAAK,UAAb,cC3BWI,G,MA3BF,SAAC,GAA4C,IAA1CN,EAAyC,EAAzCA,GAAIf,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,OAAQoB,EAAmB,EAAnBA,aAUrC,OACC,yBACCP,GAAIA,EACJJ,UAAU,OACVY,MAAO,CAAEC,gBAAgB,OAAD,OAASxB,EAAT,MACxByB,aAduB,SAAClB,GACZmB,SAASC,eAAeZ,GAChCa,SAAS,GAAGL,MAAQ,oBAaxBM,aAXuB,SAACtB,GACZmB,SAASC,eAAeZ,GAChCa,SAAS,GAAGL,MAAQ,mBAWxB,2BAAItB,GACJ,yBAAKU,UAAU,cAAcY,MAAO,CAAEO,QAAS,QAAUC,QAAST,GAAlE,wBAGA,2BAAIpB,MCKQ8B,G,MAzBD,WACb,IAAMC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SACrCpC,EAAWC,cAEXwB,EAAe,SAACf,GACrB,IAAMQ,EAAKR,EAAEC,OAAO4B,cAAcrB,GAClClB,EAAS,CAAEoB,KAAM,cAAeF,QAGjC,OACC,yBAAKJ,UAAU,SACbsB,EAAMI,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CACCC,IAAKD,EAAKvB,GACVA,GAAIuB,EAAKvB,GACTf,IAAKsC,EAAKtC,IACVC,IAAKqC,EAAKrC,IACVC,OAAQoC,EAAKpC,OACboB,aAAcA,UCPJkB,MAXf,WACC,OACC,yBAAK7B,UAAU,OACd,4BAAQA,UAAU,cACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEgB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBChBAC,EAAgB,CAAEb,MAAO,IAahBc,EAXK,WAAoC,IAAnCZ,EAAkC,uDAA1BW,EAAeE,EAAW,uCACtD,OAAQA,EAAO/B,MACd,IAAK,WACJ,OAAO,2BAAKkB,GAAZ,IAAmBF,MAAM,GAAD,mBAAOE,EAAMF,OAAb,CAAoBe,EAAOlC,YACpD,IAAK,cACJ,OAAO,2BAAKqB,GAAZ,IAAmBF,MAAOE,EAAMF,MAAMgB,QAAO,SAACX,GAAD,OAAUA,EAAKvB,KAAOiC,EAAOjC,QAC3E,QACC,OAAOoB,ICFJe,EAAQC,YAAYJ,EAAaL,OAAOU,8BAAgCV,OAAOU,gCAErFC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUL,MAAOA,GAChB,kBAAC,EAAD,QAGFxB,SAASC,eAAe,SFkHnB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ade7f308.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\nimport './MemeForm.css';\n\nconst MemeForm = () => {\n\tconst dispatch = useDispatch();\n\tconst INITIAL_VALUES = {\n\t\turl    : '',\n\t\ttop    : '',\n\t\tbottom : ''\n\t};\n\tconst [ values, setValues ] = useState(INITIAL_VALUES);\n\tconst handleChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetValues((values) => ({\n\t\t\t...values,\n\t\t\t[name] : value\n\t\t}));\n\t};\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tconst { url, top, bottom } = values;\n\t\tconst payload = { url, top, bottom, id: uuid() };\n\t\tdispatch({ type: 'ADD_MEME', payload });\n\t\tsetValues(INITIAL_VALUES);\n\t};\n\n\treturn (\n\t\t<div className=\"MemeForm\">\n\t\t\t<h1>Make-A-Meme!</h1>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tid=\"url\"\n\t\t\t\t\tname=\"url\"\n\t\t\t\t\ttype=\"url\"\n\t\t\t\t\tvalue={values.url}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder=\"Enter an image URL...\"\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\tid=\"top\"\n\t\t\t\t\tname=\"top\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={values.top}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder=\"Top text (optional)\"\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\tid=\"bottom\"\n\t\t\t\t\tname=\"bottom\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={values.bottom}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder=\"Bottom text (optional)\"\n\t\t\t\t/>\n\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default MemeForm;\n","import React from 'react';\nimport './Meme.css';\n\nconst Meme = ({ id, url, top, bottom, handleRemove }) => {\n\tconst handleMouseEnter = (e) => {\n\t\tconst meme = document.getElementById(id);\n\t\tmeme.children[1].style = 'display: inline;';\n\t};\n\tconst handleMouseLeave = (e) => {\n\t\tconst meme = document.getElementById(id);\n\t\tmeme.children[1].style = 'display: none;';\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tid={id}\n\t\t\tclassName=\"Meme\"\n\t\t\tstyle={{ backgroundImage: `url(${url})` }}\n\t\t\tonMouseEnter={handleMouseEnter}\n\t\t\tonMouseLeave={handleMouseLeave}\n\t\t>\n\t\t\t<p>{top}</p>\n\t\t\t<div className=\"Meme-Remove\" style={{ display: 'none' }} onClick={handleRemove}>\n\t\t\t\tClick here to Remove\n\t\t\t</div>\n\t\t\t<p>{bottom}</p>\n\t\t</div>\n\t);\n};\n\nexport default Meme;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Meme from './Meme';\nimport './Memes.css';\n\nconst Memes = () => {\n\tconst memes = useSelector((state) => state.memes);\n\tconst dispatch = useDispatch();\n\n\tconst handleRemove = (e) => {\n\t\tconst id = e.target.parentElement.id;\n\t\tdispatch({ type: 'REMOVE_MEME', id });\n\t};\n\n\treturn (\n\t\t<div className=\"Memes\">\n\t\t\t{memes.map((meme) => (\n\t\t\t\t<Meme\n\t\t\t\t\tkey={meme.id}\n\t\t\t\t\tid={meme.id}\n\t\t\t\t\turl={meme.url}\n\t\t\t\t\ttop={meme.top}\n\t\t\t\t\tbottom={meme.bottom}\n\t\t\t\t\thandleRemove={handleRemove}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default Memes;\n","import React from 'react';\nimport './App.css';\nimport MemeForm from './MemeForm';\nimport Memes from './Memes';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<MemeForm />\n\t\t\t\t<Memes />\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// memes will be initialized to an empty array for now\n// eventually this will be an array of objects with keys of id, img, top, bottom\nconst INITIAL_STATE = { memes: [] };\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase 'ADD_MEME':\n\t\t\treturn { ...state, memes: [ ...state.memes, action.payload ] };\n\t\tcase 'REMOVE_MEME':\n\t\t\treturn { ...state, memes: state.memes.filter((meme) => meme.id !== action.id) };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './rootReducer';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}